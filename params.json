{"name":"check","tagline":"repository checkpoints","body":"# check\r\ncheck is a program to help manage time and activity for git-based projects.    \r\n\r\n# Workflow\r\n\r\n(Optional) Step 1: Start the daemon to monitor repositories\r\n```\r\n$ ruby checkd.rb &\r\n```\r\n\r\nStep 2: Use the check tool\r\n```\r\n$ check -s # start a check point\r\n...\r\n$ check -e # end a check point and log it\r\n```\r\n\r\nStep 3: Work, work, work.\r\n\r\nStep 4: Query the check points for information about past work\r\n```\r\n$ check --stats --all\r\n<display stats for all repos>\r\n$ check --logs --all \r\n<display logs for all repos (sorted by time)\r\n$ check --todos \r\n<display TODOs for this repository>\r\n$ check --todos\r\n<display TODOs for all repositories>\r\n```\r\n\r\n# Configuration\r\n\r\nYou need to set up a shell alias to capture your git workflow. \r\n\r\n```\r\ngit-checkpoint() {\r\n    check -l \"$1\"\r\n    $1 \r\n}\r\nalias git=git-checkpoint\r\n```\r\n\r\n# Internals\r\n\r\nCheck is designed to work by recording \"checkpoint\" events and logging all\r\nuser activity in between checkpoints. These events are collected into a \r\ncheckpoint file that is commited into the repository along with the \r\nrepository. The development activity lives alongside the code. \r\n\r\nCheckpoint files are simple logs of all checkpoint and user activity.\r\nThey are structured according to the following schema.\r\n\r\n```\r\nEvent        := CheckEvent | GitEvent\r\nCheckEvent   := CheckCommand Time RepoState\r\nTime         := Timestamp (ms)\r\nRepoState    := RepoHashDigest RepoBranch\r\nCheckCommand := Start | Stop\r\nGitEvent     := GitCommand (more...)\r\nGitCommand   := <log of git command>\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}